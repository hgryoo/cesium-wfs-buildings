{
  "_args": [
    [
      {
        "raw": "formatter@0.1.x",
        "scope": null,
        "escapedName": "formatter",
        "name": "formatter",
        "rawSpec": "0.1.x",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/home/hgryoo/Developement/cesium-wfs-buildings/node_modules/geofilter"
    ]
  ],
  "_from": "formatter@>=0.1.0 <0.2.0",
  "_id": "formatter@0.1.8",
  "_inCache": true,
  "_location": "/geofilter/formatter",
  "_npmUser": {
    "name": "damonoehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "_npmVersion": "1.3.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "formatter@0.1.x",
    "scope": null,
    "escapedName": "formatter",
    "name": "formatter",
    "rawSpec": "0.1.x",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/geofilter"
  ],
  "_resolved": "https://registry.npmjs.org/formatter/-/formatter-0.1.8.tgz",
  "_shasum": "149449fcc81d490896368590c2e57824673300c7",
  "_shrinkwrap": null,
  "_spec": "formatter@0.1.x",
  "_where": "/home/hgryoo/Developement/cesium-wfs-buildings/node_modules/geofilter",
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@sidelab.com"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/formatter/issues"
  },
  "dependencies": {},
  "description": "Simple String Variable Replacement Formatter",
  "devDependencies": {
    "expect.js": "~0.2.0",
    "mocha": "~1.12.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "149449fcc81d490896368590c2e57824673300c7",
    "tarball": "https://registry.npmjs.org/formatter/-/formatter-0.1.8.tgz"
  },
  "homepage": "https://github.com/DamonOehlman/formatter#readme",
  "keywords": [
    "string",
    "formatting",
    "variable",
    "replacement"
  ],
  "license": "MIT",
  "main": "formatter",
  "maintainers": [
    {
      "name": "damonoehlman",
      "email": "damon.oehlman@sidelab.com"
    }
  ],
  "name": "formatter",
  "optionalDependencies": {},
  "readme": "# formatter\n\n<a href=\"http://travis-ci.org/#!/DamonOehlman/formatter\"><img src=\"https://secure.travis-ci.org/DamonOehlman/formatter.png\" alt=\"Build Status\"></a>\n\nThis is a simple library designed to do one thing and one thing only - replace variables in strings with variable values.  It is built in such a way that the formatter strings are parsed and you are provided with a function than can efficiently be called to provide the custom output.\n\n__NOTE__: Formatter is not designed to be a templating library and if you are already using something like Handlebars or [hogan](https://github.com/twitter/hogan.js) in your library or application stack consider using them instead.\n\nFor example:\n\n```js\n// create the \"I like food formatter\"\nvar likefood = formatter('I like {{ 0 }}, {{ 0 }} is excellent and kicks the pants off {{ 1 }}.');\n\n// I can then log out how much I like bacon\nconsole.log(likefood('bacon', 'bread'));\n```\n\nIf you have a look at your console output, you should see the following:\n\n```\nI like bacon, bacon is excellent and kicks the pants off bread.\n```\n\n## Using named variables\n\nIn the examples above we saw how the formatter can be used to replace function arguments in a formatter string.  We can also set up a formatter to use particular key values from an input string instead if that is more suitable:\n\n```js\n// create the \"I like food formatter\" (named style)\nvar likefood = formatter('I like {{ great }}, {{ great }} is excellent and kicks the pants off {{ poor }}.');\n\n// I can then log out how much I like bacon\nconsole.log(likefood({ great: 'bacon', poor: 'bread' }));\n```\n\nThis will yield the same output as our first example.\n\n### Nested Property Values\n\nSince version `0.1.0` you can also access nested property values, as you can with templates like handlebars.\n\n## Performance\n\nI've done some [performance benchmarks](http://jsperf.com/formatter-performance) and formatter is faster than handlebars, but that isn't surprising as it is far simpler and doesn't have the smarts of HBS.  The test is really there to ensure that I didn't do anything too silly...\n\nAdditionally, it should be noted that using formatter is 100% slower than concatenating strings, so don't use it where performance is critical.  Do use it where not repeating yourself is.\n\n## Modifiers\n\n### Length Modifier (len)\n\nThe length modifier is used to ensure that a string is exactly the length specified.  The string is sliced to the required max length, and then padded out with spaces (or a specified character) to meet the required length.\n\n```js\n// pad the string test to 10 characters\nformatter('{{ 0|len:10 }}')('test');   // 'test      '\n\n// pad the string test to 10 characters, using a as the padding character\nformatter('{{ 0|len:10:a }}')('test'); // 'testaaaaaa'\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/DamonOehlman/formatter.git"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec"
  },
  "tags": [
    "string",
    "formatting",
    "variable",
    "replacement"
  ],
  "version": "0.1.8"
}
