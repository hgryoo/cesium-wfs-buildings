{
  "_args": [
    [
      {
        "raw": "formatter@~0.4.1",
        "scope": null,
        "escapedName": "formatter",
        "name": "formatter",
        "rawSpec": "~0.4.1",
        "spec": ">=0.4.1 <0.5.0",
        "type": "range"
      },
      "/home/hgryoo/Developement/cesium-wfs-buildings/node_modules/wfs"
    ]
  ],
  "_from": "formatter@>=0.4.1 <0.5.0",
  "_id": "formatter@0.4.1",
  "_inCache": true,
  "_location": "/formatter",
  "_npmUser": {
    "name": "damonoehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "_npmVersion": "1.3.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "formatter@~0.4.1",
    "scope": null,
    "escapedName": "formatter",
    "name": "formatter",
    "rawSpec": "~0.4.1",
    "spec": ">=0.4.1 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/wfs"
  ],
  "_resolved": "https://registry.npmjs.org/formatter/-/formatter-0.4.1.tgz",
  "_shasum": "f43afedf8f2e7454ceae02ce45567a9fa3277fb8",
  "_shrinkwrap": null,
  "_spec": "formatter@~0.4.1",
  "_where": "/home/hgryoo/Developement/cesium-wfs-buildings/node_modules/wfs",
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "bin": {
    "formatter": "bin/formatter"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/formatter/issues"
  },
  "dependencies": {},
  "description": "Simple String Variable Replacement Formatter",
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "shasum": "f43afedf8f2e7454ceae02ce45567a9fa3277fb8",
    "tarball": "https://registry.npmjs.org/formatter/-/formatter-0.4.1.tgz"
  },
  "homepage": "https://github.com/DamonOehlman/formatter#readme",
  "keywords": [
    "string",
    "formatting",
    "variable",
    "replacement"
  ],
  "license": "MIT",
  "main": "formatter",
  "maintainers": [
    {
      "name": "damonoehlman",
      "email": "damon.oehlman@sidelab.com"
    }
  ],
  "name": "formatter",
  "optionalDependencies": {},
  "readme": "# formatter\n\nThis is a simple library designed to do one thing and one thing only -\nreplace variables in strings with variable values.  It is built in such a\nway that the formatter strings are parsed and you are provided with a\nfunction than can efficiently be called to provide the custom output.\n\n\n[![NPM](https://nodei.co/npm/formatter.png)](https://nodei.co/npm/formatter/)\n\n[![Build Status](https://travis-ci.org/DamonOehlman/formatter.png?branch=master)](https://travis-ci.org/DamonOehlman/formatter)\n[![stable](http://hughsk.github.io/stability-badges/dist/stable.svg)](http://github.com/hughsk/stability-badges)\n\n[![browser support](https://ci.testling.com/DamonOehlman/formatter.png)](https://ci.testling.com/DamonOehlman/formatter)\n\n\n## Example Usage\n\n```js\nvar formatter = require('formatter');\nvar likefood = formatter('I like {{ 0 }}, {{ 0 }} is excellent and kicks the pants off {{ 1 }}.');\n\n// I can then log out how much I like bacon\nconsole.log(likefood('bacon', 'bread'));\n// <-- I like bacon, bacon is excellent and kicks the pants off bread.\n```\n\n__NOTE__: Formatter is not designed to be a templating library and if\nyou are already using something like Handlebars or\n[hogan](https://github.com/twitter/hogan.js) in your library or application\nstack consider using them instead.\n\n## Using named variables\n\nIn the examples above we saw how the formatter can be used to replace\nfunction arguments in a formatter string.  We can also set up a formatter\nto use particular key values from an input string instead if that is more\nsuitable:\n\n```js\nvar formatter = require('formatter');\nvar likefood = formatter('I like {{ great }}, {{ great }} is excellent and kicks the pants off {{ poor }}.');\n\nconsole.log(likefood({ great: 'bacon', poor: 'bread' }));\n// <-- I like bacon, bacon is excellent and kicks the pants off bread.\n```\n\n## Nested Property Values\n\nSince version `0.1.0` you can also access nested property values, as you\ncan with templates like handlebars.\n\n## Partial Execution\n\nSince version `0.3.x` formatter also supports partial execution when using\nindexed arguments (e.g. `{{ 0 }}`, `{{ 1 }}`, etc).  For example:\n\n```js\nvar formatter = require('formatter');\nvar likefood = formatter('I like {{ 0 }}, {{ 0 }} is excellent and kicks the pants off {{ 1 }}.');\nvar partial;\n\n// get a partial \nconsole.log(partial = likefood('bacon'));\n// <-- [Function]\n\n// pass the remaining argument it's waiting for\nconsole.log(partial('bread'));\n// <-- I like bacon, bacon is excellent and kicks the pants off bread.\n```\n\nIn the case above, the original formatter function returned by `formatter`\ndid not receive enough values to resolve all the required variables.  As\nsuch it returned a function ready to accept the remaining values.\n\nOnce all values have been received the output will be generated.\n\n## Performance\n\nI've done some\n[performance benchmarks](http://jsperf.com/formatter-performance) and\nformatter is faster than handlebars, but that isn't surprising as it is far\nsimpler and doesn't have the smarts of HBS.  The test is really there to\nensure that I didn't do anything too silly...\n\nAdditionally, it should be noted that using formatter is 100% slower than\nconcatenating strings, so don't use it where performance is critical. \nDo use it where not repeating yourself is.\n\n## Modifiers\n\n### Length Modifier (len)\n\nThe length modifier is used to ensure that a string is exactly the length specified.  The string is sliced to the required max length, and then padded out with spaces (or a specified character) to meet the required length.\n\n```js\n// pad the string test to 10 characters\nformatter('{{ 0|len:10 }}')('test');   // 'test      '\n\n// pad the string test to 10 characters, using a as the padding character\nformatter('{{ 0|len:10:a }}')('test'); // 'testaaaaaa'\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/DamonOehlman/formatter.git"
  },
  "scripts": {
    "gendocs": "gendocs > README.md",
    "test": "node test/all.js"
  },
  "testling": {
    "files": "test/all.js",
    "server": "test/server.js",
    "browsers": {
      "ie": [
        "latest"
      ],
      "ff": [
        "latest",
        "nightly"
      ],
      "chrome": [
        "latest",
        "canary"
      ],
      "opera": [
        "latest",
        "next"
      ],
      "safari": [
        "latest"
      ]
    }
  },
  "version": "0.4.1"
}
